using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using QUANLYTIEC.Models;
using QUANLYTIEC.Models.BUS;

namespace QUANLYTIEC.Controllers
{
    public class PartyController : BaseController
    {
        #region method is used for load page
        public ActionResult PartyScheduler()
        {
            if (!CheckPermission())
                return RedirectToAction("Index", "Login");
            return View();
        }
        public ActionResult RegisterParty()
        {
            if (!CheckPermission())
                return RedirectToAction("Index", "Login");
            ViewBag.ComboboxPartyType = DA_PartyType.Instance.GetAll();
            ViewBag.ComboboxFood = DA_Food.Instance.loadEntityForCombobox(true);
            ViewBag.ComboboxService = DA_Service.Instance.loadEntityForCombobox(true);
            return View();
        }
        public ActionResult EditParty(string id)
        {
            if (!CheckPermission())
                return RedirectToAction("Index", "Login");
            if(!string.IsNullOrWhiteSpace(id)&& id.All(Char.IsDigit))
            {
                int Id = Convert.ToInt32(id);
                TBL_PARTY item = DA_Party.Instance.GetById(Id);
                if(item != null)
                {
                    ViewBag.ComboboxPartyType = DA_PartyType.Instance.GetAll();
                    ViewBag.ComboboxFood = DA_Food.Instance.loadEntityForCombobox(false);
                    ViewBag.ComboboxService = DA_Service.Instance.loadEntityForCombobox(false);
                    ViewBag.PartyFood = DA_PartyProduct.Instance.getEntityBasePartyId(Id);
                    ViewBag.PartyService = DA_PartyService.Instance.getEntityBasePartyId(Id);
                    return View(item);
                }
            }
            return RedirectToAction("PartyScheduler", "Party");
        }
        #endregion

        #region method is used for ajax
        /// <summary>
        /// ajax add or update entity
        /// </summary>
        /// <param name="item"></param>
        /// <param name="isEdit"></param>
        /// <returns></returns>
        [HttpPost]
        public JsonResult AddOrUpdateEntity(TBL_PARTY objectParty, List<TBL_PARTY_PRODUCT> lsObjectMeal, List<TBL_PARTY_SERVICE> lsObjecService, bool isEdit)
        {
            if (objectParty.BookingDate != null && objectParty.PartyDate != null && objectParty.NegativeDate != null && ((isEdit && objectParty.PartyID > 0) || !isEdit))
            {
                try
                {
                    objectParty.UserCreate = Convert.ToInt32(Session["UserID"].ToString().All(Char.IsDigit) ? Session["UserID"] : 0);
                    int result = isEdit ? DA_Party.Instance.Update(objectParty) : DA_Party.Instance.Insert(objectParty);
                    if (result > 0)
                    {
                        lsObjecService = lsObjecService == null ? new List<TBL_PARTY_SERVICE>() : lsObjecService;
                        lsObjectMeal = lsObjectMeal == null ? new List<TBL_PARTY_PRODUCT>() : lsObjectMeal;
                        List<TBL_PARTY_PRODUCT> mealUpdate = new List<TBL_PARTY_PRODUCT>();
                        List<TBL_PARTY_PRODUCT> mealInsert = new List<TBL_PARTY_PRODUCT>();

                        if (lsObjectMeal.Count > 0)
                        {
                            foreach (TBL_PARTY_PRODUCT item in lsObjectMeal)
                            {
                                item.PartyID = objectParty.PartyID;
                                if (item.PartyProductID > 0)
                                    mealUpdate.Add(item);
                                else
                                    mealInsert.Add(item);
                            }
                            DA_PartyProduct.Instance.Update(mealUpdate);
                            DA_PartyProduct.Instance.Insert(mealInsert);
                        }
                        

                        List<TBL_PARTY_SERVICE> serviceUpdate = new List<TBL_PARTY_SERVICE>();
                        List<TBL_PARTY_SERVICE> serviceInsert = new List<TBL_PARTY_SERVICE>();

                        if(lsObjecService.Count >0)
                        {
                            foreach (TBL_PARTY_SERVICE item in lsObjecService)
                            {
                                item.PartyID = objectParty.PartyID;
                                if (item.PartyServiceID > 0)
                                    serviceUpdate.Add(item);
                                else
                                    serviceInsert.Add(item);
                            }
                            DA_PartyService.Instance.Update(serviceUpdate);
                            DA_PartyService.Instance.Insert(serviceInsert);
                        }
                        return Json(1);
                    }
                }
                catch (Exception ex) { }
            }
            return Json(0);
        }
        [HttpPost]
        public JsonResult GetPartyForFullCalendar()
        {
            try
            {
                var dateFrom = Request.Form.GetValues("start").FirstOrDefault();
                var dateTo = Request.Form.GetValues("end").FirstOrDefault();
                DateTime DateFrom, DateTo;
                if ( ( dateFrom !=null && DateTime.TryParse((dateFrom ?? "").ToString(), out DateFrom) ) && (dateTo !=null && DateTime.TryParse((dateTo ?? "").ToString(), out DateTo) )  )
                {
                    return Json(DA_Party.Instance.GetEntityBasePartyDate(DateFrom, DateTo));
                }
            }
            catch (Exception ex) { }
            return Json(null);
        }
        #endregion
    }
}