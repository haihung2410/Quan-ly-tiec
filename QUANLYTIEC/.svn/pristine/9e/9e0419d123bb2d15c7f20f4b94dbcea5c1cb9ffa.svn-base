using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.IO;
using System.Data.Entity.SqlServer;
using System.Data.Entity;

namespace QUANLYTIEC.Models.BUS
{
    public class DA_Party : EfRepositoryBase<TBL_PARTY>
    {
        #region para
        private static volatile DA_Party _instance;
        private static readonly object SyncRoot = new Object();
        #endregion

        #region Constructor
        public static DA_Party Instance
        {
            get
            {
                if (_instance == null)
                {
                    lock (SyncRoot)
                    {
                        if (_instance == null)
                            _instance = new DA_Party();
                    }
                }
                return _instance;
            }
        }
        #endregion

        #region method
        /// <summary>
        /// method get entity base ranger party date
        /// </summary>
        /// <param name="PartyDateFrom">party date start</param>
        /// <param name="PartyDateTo">party date finish</param>
        /// <returns></returns>
        public List<Object> GetEntityBasePartyDate(DateTime PartyDateFrom, DateTime PartyDateTo)
        {
            try
            {
                using (var context = (ConnectionEFDataFirst)Activator.CreateInstance(typeof(ConnectionEFDataFirst), _connectionStr))
                {
                    List<Object> result = new List<Object>();
                    result = (from u in context.TBL_PARTY
                              where u.PartyDate >= PartyDateFrom && u.PartyDate <= PartyDateTo
                              select new { u.PartyID, u.CustomerName, u.PartyAddress, PartyDate = SqlFunctions.DateName("day", u.PartyDate) + "/" + SqlFunctions.DateName("month", u.PartyDate) + "/" + SqlFunctions.DateName("year", u.PartyDate) + " " + SqlFunctions.DateName("hour", u.PartyDate) + ":" + SqlFunctions.DateName("minute", u.PartyDate) }).ToList<Object>();
                    return result;
                }
            }
            catch (Exception ex) { return null; }
        }

        public bool ProcesseActionInsertFormAllEntity(TBL_PARTY objectParty, List<TBL_PARTY_PRODUCT> lsObjectMeal, List<TBL_PARTY_SERVICE> lsObjecService)
        {
            try
            {
                //insert object Party
                int resultExcute = Instance.Insert(objectParty);
                if (resultExcute > 0)
                {
                    var context = (ConnectionEFDataFirst)Activator.CreateInstance(typeof(ConnectionEFDataFirst), _connectionStr);
                    using (context)
                    {
                        var dbSetInsertMeal = context.Set<TBL_PARTY_PRODUCT>();
                        addObjectToDBSet_Insert(ref context, ref dbSetInsertMeal, lsObjectMeal);
                        var dbSetInsertService = context.Set<TBL_PARTY_SERVICE>();
                        addObjectToDBSet_Insert(ref context, ref dbSetInsertService, lsObjecService);
                        return context.SaveChanges() > 0 ? true : false;
                    }
                }
            }
            catch (Exception ex) { }
            return false;
        }
        public bool ProcesseActionUpdateFormAllEntity(TBL_PARTY objectParty, List<TBL_PARTY_PRODUCT> lsObjectMeal, List<TBL_PARTY_SERVICE> lsObjecService)
        {
            try
            {
                //insert object Party
                int resultExcute = Instance.Update(objectParty);
                if (resultExcute > 0)
                {
                    var context = (ConnectionEFDataFirst)Activator.CreateInstance(typeof(ConnectionEFDataFirst), _connectionStr);
                    using (context)
                    {
                        ProcesseActionUpdateFormEnityMeal(ref context, objectParty, lsObjectMeal);
                        ProcesseActionUpdateFormEnityService(ref context, objectParty, lsObjecService);
                        return context.SaveChanges() > 0 ? true : false;
                    }
                }
            }
            catch (Exception ex) { }
            return false;
        }
        private void ProcesseActionUpdateFormEnityMeal(ref ConnectionEFDataFirst context, TBL_PARTY objectParty, List<TBL_PARTY_PRODUCT> lsMeal)
        {
            bool resultExucte = true;
            setValueForAttributeListClassObject(objectParty.PartyID, ref lsMeal, "PartyID");
            //get list object old of entity product
            List<TBL_PARTY_PRODUCT> lsMealOld = DA_PartyProduct.Instance.getEntityBasePartyId(objectParty.PartyID);
            lsMealOld = lsMealOld == null ? new List<TBL_PARTY_PRODUCT>() : lsMealOld;
            List<TBL_PARTY_PRODUCT> lsMealNew = lsMeal == null ? new List<TBL_PARTY_PRODUCT>() : lsMeal;
            if (lsMealNew.Count > 0 && lsMealOld.Count == 0)
            {
                var dbSetInsertMeal = context.Set<TBL_PARTY_PRODUCT>();
                addObjectToDBSet_Insert(ref context, ref dbSetInsertMeal, lsMealNew);
            }
            if (lsMealNew.Count == 0 && lsMealOld.Count > 0)
            {
                var dbSetDeleteMeal = context.Set<TBL_PARTY_PRODUCT>();
                deleteListObject(ref context, ref dbSetDeleteMeal, lsMealOld);
            }
            if (lsMealNew.Count > 0 && lsMealOld.Count > 0)
            {
                List<int> lsPartyIdNew = lsMealNew.Select(n => n.PartyProductID).ToList();
                List<int> lsPartyIdOld = lsMealOld.Select(n => n.PartyProductID).ToList();
                //array productId 
                List<int> partyIdDelete = lsPartyIdOld.Except(lsPartyIdNew).ToList();
                List<int> partyIdUpdate = lsPartyIdNew.Where(n => lsPartyIdOld.Any(p => p == n)).ToList();

                //item exist array old not exist array new is array delete
                List<TBL_PARTY_PRODUCT> lsDelete = lsMealOld.Where(n => partyIdDelete.Any(p => p == n.PartyProductID)).ToList();
                //item exist array new not exist array old is array delete
                List<TBL_PARTY_PRODUCT> lsInsert = lsMealNew.Where(n => n.PartyProductID == 0).ToList();
                // item exist array new and array old is array insert
                List<TBL_PARTY_PRODUCT> lsUpdate = lsMealNew.Where(n => partyIdUpdate.Any(p => p == n.PartyProductID)).ToList();
                //excute
                if (lsDelete != null && lsDelete.Count > 0)
                {
                    var dbSetDeleteMeal = context.Set<TBL_PARTY_PRODUCT>();
                    deleteListObject(ref context, ref dbSetDeleteMeal, lsDelete);
                }
                if (lsInsert != null && lsInsert.Count > 0 && resultExucte)
                {
                    var dbSetInsertMeal = context.Set<TBL_PARTY_PRODUCT>();
                    addObjectToDBSet_Insert(ref context, ref dbSetInsertMeal, lsInsert);
                }
                if (lsUpdate != null && lsUpdate.Count > 0 && resultExucte)
                {
                    var dbSetUpdateMeal = context.Set<TBL_PARTY_PRODUCT>();
                    addObjectToDBSet_Update(ref context, ref dbSetUpdateMeal, lsUpdate);
                }
            }
        }
        private void ProcesseActionUpdateFormEnityService(ref ConnectionEFDataFirst context, TBL_PARTY objectParty, List<TBL_PARTY_SERVICE> lsService)
        {
            bool resultExucte = true;
            setValueForAttributeListClassObject(objectParty.PartyID, ref lsService, "PartyID");
            //get list object old of entity product
            List<TBL_PARTY_SERVICE> lsServiceOld = DA_PartyService.Instance.getEntityBasePartyId(objectParty.PartyID);
            lsServiceOld = lsServiceOld == null ? new List<TBL_PARTY_SERVICE>() : lsServiceOld;
            List<TBL_PARTY_SERVICE> lsServiceNew = lsService == null ? new List<TBL_PARTY_SERVICE>() : lsService;
            if (lsServiceNew.Count > 0 && lsServiceOld.Count == 0)
            {
                var dbSetInsertMeal = context.Set<TBL_PARTY_SERVICE>();
                addObjectToDBSet_Insert(ref context, ref dbSetInsertMeal, lsServiceNew);
            }
            if (lsServiceNew.Count == 0 && lsServiceOld.Count > 0)
            {
                var dbSetDeleteMeal = context.Set<TBL_PARTY_SERVICE>();
                deleteListObject(ref context, ref dbSetDeleteMeal, lsServiceOld);
            }
            if (lsServiceNew.Count > 0 && lsServiceOld.Count > 0)
            {
                List<int> lsPartyIdNew = lsServiceNew.Select(n => n.PartyServiceID).ToList();
                List<int> lsPartyIdOld = lsServiceOld.Select(n => n.PartyServiceID).ToList();
                //array productId 
                List<int> partyIdDelete = lsPartyIdOld.Except(lsPartyIdNew).ToList();
                List<int> partyIdUpdate = lsPartyIdNew.Where(n => lsPartyIdOld.Any(p => p == n)).ToList();

                //item exist array old not exist array new is array delete
                List<TBL_PARTY_SERVICE> lsDelete = lsServiceOld.Where(n => partyIdDelete.Any(p => p == n.PartyServiceID)).ToList();
                //item exist array new not exist array old is array delete
                List<TBL_PARTY_SERVICE> lsInsert = lsServiceNew.Where(n => n.PartyServiceID == 0).ToList();
                // item exist array new and array old is array insert
                List<TBL_PARTY_SERVICE> lsUpdate = lsServiceNew.Where(n => partyIdUpdate.Any(p => p == n.PartyServiceID)).ToList();
                //excute
                if (lsDelete != null && lsDelete.Count > 0)
                {
                    var dbSetDeleteMeal = context.Set<TBL_PARTY_SERVICE>();
                    deleteListObject(ref context, ref dbSetDeleteMeal, lsDelete);
                }
                if (lsInsert != null && lsInsert.Count > 0 && resultExucte)
                {
                    var dbSetInsertMeal = context.Set<TBL_PARTY_SERVICE>();
                    addObjectToDBSet_Insert(ref context, ref dbSetInsertMeal, lsInsert);
                }
                if (lsUpdate != null && lsUpdate.Count > 0 && resultExucte)
                {
                    var dbSetUpdateMeal = context.Set<TBL_PARTY_SERVICE>();
                    addObjectToDBSet_Update(ref context, ref dbSetUpdateMeal, lsUpdate);
                }
            }
        }
        //private void ProcesseActionUpdateFormEnityMeal(ref ConnectionEFDataFirst context, TBL_PARTY objectParty, List<TBL_PARTY_PRODUCT> lsMeal)
        //{
        //    bool resultExucte = true;
        //    setValueForAttributeListClassObject(objectParty.PartyID, ref lsMeal, "PartyID");
        //    //get list object old of entity product
        //    List<TBL_PARTY_PRODUCT> lsMealOld = DA_PartyProduct.Instance.getEntityBasePartyId(objectParty.PartyID);
        //    lsMealOld = lsMealOld == null ? new List<TBL_PARTY_PRODUCT>() : lsMealOld;
        //    List<TBL_PARTY_PRODUCT> lsMealNew = lsMeal == null ? new List<TBL_PARTY_PRODUCT>() : lsMeal;
        //    if (lsMealNew.Count > 0 && lsMealOld.Count == 0)
        //    {
        //        var dbSetInsertMeal = context.Set<TBL_PARTY_PRODUCT>();
        //        addObjectToDBSet_Insert(ref context, ref dbSetInsertMeal, lsMealNew);
        //    }
        //    if (lsMealNew.Count == 0 && lsMealOld.Count > 0)
        //    {
        //        var dbSetDeleteMeal = context.Set<TBL_PARTY_PRODUCT>();
        //        deleteListObject(ref context, ref dbSetDeleteMeal, lsMealOld);
        //    }
        //    if (lsMealNew.Count > 0 && lsMealOld.Count > 0)
        //    {
        //        List<int> lsPartyIdNew = lsMealNew.Select(n => n.PartyProductID).ToList();
        //        List<int> lsPartyIdOld = lsMealOld.Select(n => n.PartyProductID).ToList();
        //        //array productId 
        //        List<int> partyIdDelete = lsPartyIdOld.Except(lsPartyIdNew).ToList();
        //        List<int> partyIdUpdate = lsPartyIdNew.Where(n => lsPartyIdOld.Any(p => p == n)).ToList();

        //        //item exist array old not exist array new is array delete
        //        List<TBL_PARTY_PRODUCT> lsDelete = lsMealOld.Where(n => partyIdDelete.Any(p => p == n.PartyProductID)).ToList();
        //        //item exist array new not exist array old is array delete
        //        List<TBL_PARTY_PRODUCT> lsInsert = lsMealNew.Where(n => n.PartyProductID == 0).ToList();
        //        // item exist array new and array old is array insert
        //        List<TBL_PARTY_PRODUCT> lsUpdate = lsMealNew.Where(n => partyIdUpdate.Any(p => p == n.PartyProductID)).ToList();
        //        //excute
        //        if (lsDelete != null && lsDelete.Count > 0)
        //        {
        //            var dbSetDeleteMeal = context.Set<TBL_PARTY_PRODUCT>();
        //            deleteListObject(ref context, ref dbSetDeleteMeal, lsDelete);
        //        }
        //        if (lsInsert != null && lsInsert.Count > 0 && resultExucte)
        //        {
        //            var dbSetInsertMeal = context.Set<TBL_PARTY_PRODUCT>();
        //            addObjectToDBSet_Insert(ref context, ref dbSetInsertMeal, lsInsert);
        //        }
        //        if (lsUpdate != null && lsUpdate.Count > 0 && resultExucte)
        //        {
        //            var dbSetUpdateMeal = context.Set<TBL_PARTY_PRODUCT>();
        //            addObjectToDBSet_Update(ref context, ref dbSetUpdateMeal, lsUpdate);
        //        }
        //    }
        //}
        
        #endregion
    }
}